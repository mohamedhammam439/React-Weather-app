{"version":3,"sources":["Components/Navbar.jsx","Components/Form.jsx","Components/Data.jsx","Components/Weather.jsx","Components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","exact","to","className","Form","props","onSubmit","getWeather","type","placeholder","name","Data","City","Country","icon","src","pressure","Tempreature","humidity","description","error","Weather","state","e","a","preventDefault","city","target","elements","value","fetch","api","json","data","setState","sys","country","weather","main","temp","this","Component","Home","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0XAmBeA,G,MAfA,WACX,OACI,6BACI,4BACI,6BAAK,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,IAAIC,UAAU,WAAhC,SACL,6BAAK,kBAAC,IAAD,CAASF,OAAK,EAACC,GAAG,UAAUC,UAAU,WAAtC,aAET,yBAAKA,UAAU,WAAf,WACA,yBAAKA,UAAU,QACf,yBAAKA,UAAU,W,yBCIZC,EAfF,SAACC,GACV,OACI,0BAAMC,SAAUD,EAAME,YAClB,yBAAKJ,UAAU,gBACX,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOL,UAAU,cAAcM,YAAY,OAAOC,KAAK,UAEvE,yBAAKP,UAAU,YACX,4BAAQA,UAAU,6BAAlB,YCsBLQ,G,MA7BF,SAACN,GACV,OACI,6BAEIA,EAAMO,MAAQ,wBAAIT,UAAU,QAAQE,EAAMO,KAA5B,MAAqCP,EAAMQ,SAGzDR,EAAMS,MAAQ,yBAAKC,IAAI,gDAIvBV,EAAMW,UAAY,wBAAIb,UAAU,QAAQE,EAAMW,UAG9CX,EAAMY,aAAe,wBAAId,UAAU,QAAQE,EAAMY,aAGjDZ,EAAMa,UAAY,wBAAIf,UAAU,QAAQE,EAAMa,UAG9Cb,EAAMc,aAAe,wBAAIhB,UAAU,QAAQE,EAAMc,aAGjDd,EAAMe,OAAS,wBAAIjB,UAAU,QAAd,WAA8BE,EAAMe,UCiDhDC,G,kNApEXC,MAAQ,CACJV,KAAK,GACLC,QAAQ,GACRC,KAAK,GACLG,YAAY,GACZD,SAAS,GACTE,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAGVb,W,uCAAa,WAAMgB,GAAN,mBAAAC,EAAA,6DACTD,EAAEE,iBACIC,EAAKH,EAAEI,OAAOC,SAASF,KAAKG,MAFzB,SAGOC,MAAM,oDAAD,OAAqDJ,EAArD,4CAHZ,cAGHK,EAHG,gBAIQA,EAAIC,OAJZ,OAIHC,EAJG,OAKNP,EACC,EAAKQ,SAAS,CACVtB,KAAKqB,EAAKvB,KACVG,QAAQoB,EAAKE,IAAIC,QACjBtB,KAAKmB,EAAKI,QAAQ,GAAGvB,KACrBG,YAAYgB,EAAKK,KAAKC,KACtBvB,SAASiB,EAAKI,QAAQ,GAAGC,KACzBpB,SAASe,EAAKK,KAAKpB,SACnBC,YAAYc,EAAKI,QAAQ,GAAGlB,YAC5BC,MAAM,KAGV,EAAKc,SAAS,CACVtB,KAAK,GACLC,QAAQ,GACRC,KAAK,GACLG,YAAY,GACZD,SAAS,GACTE,SAAS,GACTC,YAAY,GACZC,MAAM,uBAzBL,2C,6GA+BT,OACI,yBAAKjB,UAAU,OACX,yBAAKA,UAAU,aAEP,wBAAIA,UAAU,cAAd,2BACA,2DAEA,kBAAC,EAAD,CAAMI,WAAYiC,KAAKjC,aACvB,kBAAC,EAAD,CACGK,KAAM4B,KAAKlB,MAAMV,KACjBC,QAAS2B,KAAKlB,MAAMT,QACpBC,KAAM0B,KAAKlB,MAAMR,KACjBG,YAAauB,KAAKlB,MAAML,YACxBD,SAAUwB,KAAKlB,MAAMN,SACrBE,SAAUsB,KAAKlB,MAAMJ,SACrBC,YAAaqB,KAAKlB,MAAMH,YACxBC,MAAOoB,KAAKlB,MAAMF,c,GA3DvBqB,cCQPC,G,MAXF,WACT,OACI,yBAAKvC,UAAU,aACX,yBAAKA,UAAU,QACV,8CACA,+CCyBFwC,G,6KAvBX,OACE,kBAAC,IAAD,KACE,yBAAKxC,UAAU,aAEb,yBAAKA,UAAU,OAEb,yBAAKA,UAAU,OACb,kBAAC,IAAD,CAAOF,OAAK,EAAC2C,KAAK,IAAIC,UAAWH,IACjC,kBAAC,IAAD,CAAOE,KAAK,WAAWC,UAAWxB,KAGpC,yBAAKlB,UAAU,eACb,kBAAC,EAAD,c,GAdIsC,cCIEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.9760875f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = () => {\r\n    return ( \r\n        <div >\r\n            <ul>\r\n                <div><NavLink exact to='/' className='navlist'>Home</NavLink></div>\r\n                <div><NavLink exact to='weather' className='navlist'>Weather</NavLink></div>\r\n            </ul>\r\n            <div className='weather'>Weather</div>\r\n            <div className='one'></div>\r\n            <div className='two'></div>\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return ( \r\n        <form onSubmit={props.getWeather}>\r\n            <div className='row row-form'>\r\n                <div className='col-md-9'>\r\n                    <input type='text' className='input-group' placeholder='city' name='city' />\r\n                </div>\r\n                <div className='col-md-3'>\r\n                    <button className='btn btn-primary btn-block'>find</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport './Data.css';\r\n\r\nconst Data = (props) => {\r\n    return ( \r\n        <div>\r\n        {\r\n            props.City && <h2 className='marg'>{props.City} , {props.Country}</h2>\r\n        }\r\n        {\r\n            props.icon && <img src='http://openweathermap.org/img/wn/01d@2x.png'/>\r\n        }\r\n       \r\n        {\r\n            props.pressure && <h2 className='marg'>{props.pressure}</h2> \r\n        }\r\n         {\r\n            props.Tempreature && <h2 className='marg'>{props.Tempreature}</h2> \r\n        }\r\n        {\r\n            props.humidity && <h2 className='marg'>{props.humidity}</h2>\r\n        }\r\n        {\r\n            props.description && <h5 className='marg'>{props.description}</h5>\r\n        }\r\n        {\r\n            props.error && <h2 className='marg'>Error : {props.error}</h2>\r\n        }   \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Data;","import React, { Component } from 'react';\r\nimport Form from './Form';\r\nimport Data from './Data';\r\nimport './Weather.css';\r\n\r\n\r\nclass Weather extends Component {\r\n    state = { \r\n        City:'',\r\n        Country:'',\r\n        icon:'',\r\n        Tempreature:'',\r\n        pressure:'',\r\n        humidity:'',\r\n        description:'',\r\n        error:''\r\n     }\r\n\r\n    getWeather = async(e) =>{\r\n        e.preventDefault();\r\n        const city=e.target.elements.city.value;\r\n        const api=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=487862f576f796db554187c8715d2b90`)\r\n        const data=await api.json();\r\n        if(city){\r\n            this.setState({\r\n                City:data.name,\r\n                Country:data.sys.country,\r\n                icon:data.weather[0].icon,\r\n                Tempreature:data.main.temp,\r\n                pressure:data.weather[0].main,\r\n                humidity:data.main.humidity,\r\n                description:data.weather[0].description,\r\n                error:''\r\n            })\r\n        }else{\r\n            this.setState({\r\n                City:'',\r\n                Country:'',\r\n                icon:'',\r\n                Tempreature:'',\r\n                pressure:'',\r\n                humidity:'',\r\n                description:'',\r\n                error:'Please Insert Data'\r\n            })\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className='App'>\r\n                <div className='container'>\r\n                    \r\n                        <h2 className='marg xs-h2'>Just type the city name</h2>\r\n                        <h6>you must spilling correctly</h6>\r\n                       \r\n                        <Form getWeather={this.getWeather} />\r\n                        <Data \r\n                           City={this.state.City}\r\n                           Country={this.state.Country}\r\n                           icon={this.state.icon}\r\n                           Tempreature={this.state.Tempreature}\r\n                           pressure={this.state.pressure}\r\n                           humidity={this.state.humidity}\r\n                           description={this.state.description}\r\n                           error={this.state.error}\r\n                        />\r\n                    \r\n                </div>\r\n               \r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Weather;\r\n\r\n","import React from 'react';\r\nimport \"./Home.css\";\r\n\r\nconst Home = () => {\r\n    return ( \r\n        <div className='container'>\r\n            <div className='home'>\r\n                 <h2>Welcom To Our </h2>\r\n                 <h1>Weather App</h1>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Home;","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Navbar from './Components/Navbar';\nimport Weather from './Components/Weather';\nimport Home from './Components/Home';\nimport './App.css';\n\n\nclass App extends Component {\n  render() { \n    return ( \n      <BrowserRouter>\n        <div className='container'>\n\n          <div className='row'>\n\n            <div className='col'>\n              <Route exact path='/' component={Home}/>\n              <Route path='/Weather' component={Weather} />\n            </div>\n\n            <div className='col-xs-1 mr'>\n              <Navbar />\n            </div>\n          </div>\n        </div>\n          \n      </BrowserRouter>\n     \n     );\n  }\n}\n \nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}